
# # About Dataset 



# The dataset contains transactions made by credit cards in September 2013 by European cardholders.
# This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.

# It contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, â€¦ V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-sensitive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.

# Given the class imbalance ratio, we recommend measuring the accuracy using the Area Under the Precision-Recall Curve (AUPRC). Confusion matrix accuracy is not meaningful for unbalanced classification




# # about the project

# Data Preparation:

# The code starts with a dataset of credit card transactions, some of which are legitimate (real) transactions, and some are fraudulent (fake).
# It first separates the data into two groups: legitimate transactions and fraudulent transactions.
# Creating a Balanced Dataset:

# There are usually many more legitimate transactions than fraudulent ones. This can make it challenging for a model to learn to detect fraud because it might focus too much on the majority class.
# To address this, the code creates a new dataset with an equal number of legitimate and fraudulent transactions. It does this by randomly selecting a subset of legitimate transactions to match the number of fraudulent ones.
# Training the Model:

# Once it has a balanced dataset, the code uses it to teach the computer how to recognize the patterns associated with fraudulent transactions.
# It uses a method called Logistic Regression, which is like a simple algorithm that learns from the data.
# Think of it like teaching a computer to recognize certain signs of fraud by showing it examples of both legitimate and fraudulent transactions.
# Detecting Fraud:

# After the computer has learned from the data, it can now look at a new, unseen credit card transaction and decide whether it's likely to be a legitimate or fraudulent one.
# It does this by examining various features of the transaction (like the transaction amount, time, etc.) and using what it has learned during training to make a prediction.
# If it predicts that the transaction is likely to be fraudulent, it raises an alarm or flags it for further investigation.
# Evaluation:

# The code checks how well the computer's predictions match the actual outcomes for both the training data (data it learned from) and a separate test dataset (new data it hasn't seen before).
# It calculates an "accuracy" score, which tells us how often the computer's predictions are correct. A higher accuracy score indicates better fraud detection.
# So, in simple terms, this code is like training a computer to recognize suspicious patterns in credit card transactions so that it can help identify potential fraud and protect people from unauthorized or fake charges on their credit cards.




